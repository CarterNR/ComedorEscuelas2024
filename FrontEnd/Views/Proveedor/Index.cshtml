@model IEnumerable<FrontEnd.Models.ProveedorViewModel>

@{
    ViewData["Title"] = "Proveedores";
}


<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>@ViewData["Title"]</title>

    <link rel="shortcut icon" href="../images/favicon.ico" />
    <link rel="stylesheet" href="../css/backend-plugin.min.css">
    <link rel="stylesheet" href="../css/backend.css?v=1.0.0">
    <link rel="stylesheet" href="../vendor/line-awesome/dist/line-awesome/css/line-awesome.min.css">
    <link rel="stylesheet" href="../vendor/remixicon/fonts/remixicon.css">
</head>

<body>
    <div class="content-page">
        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-12">
                    <div class="d-flex flex-wrap align-items-center justify-content-between mb-4">
                        <div>
                            <h4 class="mb-3">Proveedores</h4>
                        </div>
                        
                    </div>
                </div>



                <div class="col-lg-12">
                    <div class="table-responsive rounded mb-3">

                        <div class="col-lg-12">
                            <div class="d-flex flex-wrap align-items-stretch justify-content-between mb-4">

                                <a class="btn btn-primary add-list mb-3" asp-area="" asp-controller="Proveedor" asp-action="Create">
                                    <i class="las la-plus mr-3"></i><span>Nuevo proveedor</span>
                                </a>

                                <div>
                                    <form method="get" asp-action="Index" class="form-inline mb-3" id="searchForm">
                                        <input name="searchString" class="form-control mr-2" type="search" placeholder="Buscar proveedor" value="@ViewBag.SearchString" id="searchInput">
                                        <button type="submit" class="btn btn-primary">Buscar</button>
                                    </form>
                                </div>
                            </div>
                        </div>

                        
                        <table class="data-table table mb-0 tbl-server-info">
                            <thead class="bg-white text-uppercase">
                                <tr class="ligth ligth-data">
                                    <th>Nombre Proveedor</th>
                                    <th>Teléfono</th>
                                    <th>Correo Electrónico</th>
                                    <th>Dirección</th>
                                    <th>Estado</th>
                                    <th>Nombre Escuela</th>
                                    <th>Opciones</th>
                                </tr>
                            </thead>
                            <tbody class="ligth-body">
                                @foreach (var item in Model)
                                {
                                    <tr>
                                        <td>@Html.DisplayFor(modelItem => item.NombreProveedor)</td>
                                        <td>@Html.DisplayFor(modelItem => item.Telefono)</td>
                                        <td>@Html.DisplayFor(modelItem => item.CorreoElectronico)</td>
                                        <td>@Html.DisplayFor(modelItem => item.Direccion)</td>
                                        <td>
                                            <div class="badge @(item.Estado ?? false ? "badge-success" : "badge-danger")">
                                                @(item.Estado.HasValue ? (item.Estado.Value ? "Activo" : "Inactivo") : "Desconocido")
                                            </div>
                                        </td>
                                        
                                        <td>
                                            @Html.DisplayFor(modelItem => item.NombreEscuela)
                                        </td>
                                        <td>
                                            <div class="d-flex align-items-center list-action">
                                                <a class="badge badge-info mr-2" data-toggle="tooltip" data-placement="top" title="Ver detalles"
                                                   href="@Url.Action("Details", "Proveedor", new { id = item.IdProveedor })">
                                                    <i class="ri-eye-line mr-0"></i>
                                                </a>
                                                <a class="badge bg-success mr-2" data-toggle="tooltip" data-placement="top" title="Editar"
                                                   href="@Url.Action("Edit", "Proveedor", new { id = item.IdProveedor })">
                                                    <i class="ri-pencil-line mr-0"></i>
                                                </a>
                                                <a class="badge bg-warning mr-2" data-toggle="tooltip" data-placement="top" title="Borrar"
                                                   href="@Url.Action("Delete", "Proveedor", new { id = item.IdProveedor })">
                                                    <i class="ri-delete-bin-line mr-0"></i>
                                                </a>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>


                    @if (ViewBag.TotalPages > 1)
                    {
                        <nav aria-label="Paginación">
                            <ul class="pagination justify-content-between">
                                <div class="text-end mt-1">
                                    Mostrando @ViewBag.Mostrando de @ViewBag.TotalRegistros resultados
                                </div>

                                <ul class="pagination justify-content-end">
                                    <li class="page-item @(ViewBag.CurrentPage == 1 ? "disabled" : "")">
                                        <a class="page-link" href="@Url.Action("Index", new { page = ViewBag.CurrentPage - 1, searchString = ViewBag.SearchString })">Anterior</a>
                                    </li>

                                    @for (int i = 1; i <= ViewBag.TotalPages; i++)
                                    {
                                        <li class="page-item @(ViewBag.CurrentPage == i ? "active" : "")">
                                            <a class="page-link" href="@Url.Action("Index", new { page = i, searchString = ViewBag.SearchString })">@i</a>
                                        </li>
                                    }

                                    <li class="page-item @(ViewBag.CurrentPage == ViewBag.TotalPages ? "disabled" : "")">
                                        <a class="page-link" href="@Url.Action("Index", new { page = ViewBag.CurrentPage + 1, searchString = ViewBag.SearchString })">Siguiente</a>
                                    </li>
                                </ul>




                            </ul>
                        </nav>
                    }


                </div>
            </div>
        </div>
    </div>

    <!-- Backend Bundle JavaScript -->
    <script src="../assets/js/backend-bundle.min.js"></script>
    <script src="../assets/js/table-treeview.js"></script>
    <script src="../assets/js/customizer.js"></script>
    <script async src="../assets/js/chart-custom.js"></script>
    <script src="../assets/js/app.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('searchInput');
            const searchForm = document.getElementById('searchForm');
            let previousValue = searchInput.value;

            // Detectar cuando se limpia el campo (incluyendo la X nativa)
            searchInput.addEventListener('input', function() {
                // Si tenía contenido y ahora está vacío, enviar el form
                if (previousValue !== '' && this.value === '') {
                    searchForm.submit();
                }
                previousValue = this.value;
            });
        });
    </script>
    
</body>
</html>
